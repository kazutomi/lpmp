#!/usr/bin/env ruby
# coding: utf-8

class LpmpState
  DefaultSectionDepth = 5
  attr_accessor :matter, :secno

  def initialize(sec_depth = DefaultSectionDepth)
    @matter = :main
    @secno = Array.new(sec_depth, 0)
  end
end

$state = nil

NPass = 2  # two-pass processing

def process_kw(l)
  l.gsub(/@<kw>{([^,}]+)(,[^}]+)?}/){"**#{$1}**"}  # ignore yomi for now
end

def process_ruby(l)
  l.gsub(/@<ruby>{([^,]+),([^}]+)}/){"#{$1}^#{$2}^"}
end

def process(l)
  s = nil
  if /^@@/ =~ l
    # reserved for line directive
    s = nil
  else
    s = process_kw(l)
    s = process_ruby(s) unless s.nil?
  end
  s
end

def number_sections(s)
  s
end

def number_figures(s)
  s
end

def main
  in_lines = ARGF.readlines
  out_lines = nil

  NPass.times do |npass|
    case npass
    when 0  # number sections and figures
      out_lines = []
      $state = LpmpState.new
      in_lines.each do |l|
        s = number_sections(l)
        s = number_figures(s) unless s.nil?
        out_lines << s unless s.nil?
      end
    when 1  # process Re:VIEW-like commands
      out_lines = []
      in_lines.each do |l|
        s = process(l)
        out_lines << s unless s.nil?
      end
    else
      $stderr.puts "Unexpected pass #{npass}"
      out_lines = in_lines
    end
  end

  out_lines.each do |l|
    puts l
  end
end

main
0
