#!/usr/bin/env ruby
# coding: utf-8

case ENV['LANG']
when /\Aja_/
  FigureFormat = "図%s　"
  TableFormat = "表%s　"
  CodeListFormat = "リスト%s　"
else
  FigureFormat = "Figure %s: "
  TableFormat = "Table %s: "
  CodeListFormat = "List %s: "
end

class LpmpState
  DefaultSectionDepth = 5
  attr_accessor :file_name, :matter, :secno, :figno, :tblno, :listno, :verb
  attr_reader :secdepth

  def initialize(sec_depth = DefaultSectionDepth)
    @file_name = nil
    @matter = :main
    @secdepth = sec_depth
    reset_sections
    @figno = 0
    @tblno = 0
    @listno = 0
    @verb = false
  end

  def reset_sections
    @secno = Array.new(@secdepth, 0)
  end
end

class LineStream
  class InputLine
    attr_accessor :line, :no

    def initialize(line, no)
      @line = line
      @no = no
    end
  end

  attr_accessor :queue  # of InputLines

  def initialize(lines = [])
    @queue = []
    n = 0
    lines.each do |s|
      n += 1
      @queue << InputLine.new(s, n)
    end
  end

  def empty?
    @queue.size == 0
  end

  def peekl
    @queue[0]
  end

  def getl
    @queue.shift
  end

  def putl(l)
    @queue << l
  end

  def unshift(x)
    case x
    when Array, InputLine
      @queue.unshift(*x)
    when nil
    else
      $stderr.puts "Error: cannot unshift #{x} to LineStream"
    end
  end

  def each
    @queue.each do |l|
      yield l
    end
  end

  def dump
    puts "*** Dumping LineStream ***"
    @queue.each do |l|
      puts "#{l.inspect}"
    end
    puts "*** End Dumping ***"
  end
end

$state = nil
$figtag = {}
$tbltag = {}
$listtag = {}
$seclabel = {}

NPass = 2  # two-pass processing

def process_kw(l)
  l.line.gsub!(/@<kw>{([^,}]+)(,[^}]+)?}/){"**#{$1}**"}  # ignore yomi for now
  l
end

def process_ruby(l)
  l.line.gsub!(/@<ruby>{([^,]+),([^}]+)}/){"#{$1}（#{$2}）"}
  l
end

def process_commands(l)
  if /^@@/ =~ l.line
    # reserved for line directive
    l = nil
  else
    l = process_kw(l)
    l = process_ruby(l) unless l.nil?
  end
  l
end

def switch_matter(l)
  case l.line
  when '{frontmatter}'
    $state.matter = :front
    $state.reset_sections
  when '{mainmatter}'
    $state.matter = :main
    $state.reset_sections
  when '{backmatter}'
    $state.matter = :back
    $state.reset_sections
  else
  end
  l
end

def section_id(matter, secno, depth)
  s = case matter
      when :front
        'front'
      when :main
        'section'
      when :back
        'back'
      end
  for i in 0..depth do
    break if secno[i] == 0
    s += "-#{secno[i]}"
  end
  s
end

def number_sections(l)
  return l unless /\A(.?> )?(#+)/ =~ l.line
  tbhead = $1 || ''
  sharps = $2
  depth = sharps.size - 1  # zero-origin
  if depth >= $state.secdepth
    depth = $state.secdepth - 1
  end

  $state.secno[depth] += 1
  if depth < $state.secdepth
    for i in (depth+1)..$state.secdepth do
      $state.secno[i] = 0
    end
  end

  if depth == 0
    $state.figno = 0
    $state.tblno = 0
    $state.listno = 0
  end

  id = section_id($state.matter, $state.secno, depth)

  l.line += " {##{id}}"
  l
end

def number_figures(l)
  l.line.scan(/@<fig>\{([^}]*)\}\[([^\]]*)\]\(([^)]*)\)/) do
    $state.figno += 1
    $figtag[$1] = "#{$state.secno[0]}-#{$state.figno}"
  end
  l
end

def number_tables(l)
  l.line.scan(/@<tbl>\{([^}]*)\}\[([^\]]*)\]/) do
    $state.tblno += 1
    $tbltag[$1] = "#{$state.secno[0]}-#{$state.tblno}"
  end
  l
end

def number_code_lists(l)
  case l.line
  when /@<list>\{([^}]*)\}/
    $state.listno += 1
    $listtag[$1] = "#{$state.secno[0]}-#{$state.listno}"
  end
  l
end

def label_sections(l)
  l.line.gsub!(/@<slabel>\{([^}]*)\}/) do
    $seclabel[$1] = [$state.matter, $state.secno.join(' '), $state.secdepth]
    ''
  end
  l
end

def figure_format(no)
  sprintf FigureFormat, no
end

def table_format(no)
  sprintf TableFormat, no
end

def code_list_format(no)
  sprintf CodeListFormat, no
end

def tag_figures(l)
  if /\A(.?> )?@<fig>\{([^}]*)\}\[([^\]]*)\]\(([^)]*)\)(\{([^}]*)\})?\s*\Z/ =~ l.line
    tbhead = $1 || ''
    tag = $2
    figno = $figtag[tag] || 'XX'
    caption = $3
    file = $4
    options = $6
    options = ', ' + options if options and options != ''
    [
      LineStream::InputLine.new("#{tbhead}{id=\"#{tag}\"#{options}}", l.no),
      LineStream::InputLine.new(
        "#{tbhead}![#{figure_format(figno)}#{caption}](#{file})",
        l.no
      ),
    ]
  else
    l
  end
end

def tag_tables(l)
  case l.line
  when /\A(.?> )?@<tbl>\{([^}]*)\}\[([^\]]*)\](\{([^}]*)\})?\s*\Z/
    tbhead = $1 || ''
    tag = $2
    tblno = $tbltag[tag] || 'XX'
    caption = $3
    options = $5
    options = ', ' + options if options and options != ''
    l.line = "#{tbhead}{id=\"#{tag}\", title=\"#{table_format(tblno)}#{caption}\"#{options}}"
    l
  when /\A(.?> )?@<tbl>\s*\Z/
    nil
  else
    l
  end
end

def tag_code_lists(l)
  case l.line
  when /\A(.?> )?@<list>\{([^}]*)\}\[([^\]]*)\]\(([^)]*)\)(\{([^}]*)\})?\s*\Z/
    tbhead = $1 || ''
    tag = $2
    listno = $listtag[tag] || 'XX'
    caption = $3
    file = $4
    options = $6
    options = ', ' + options if options and options != ''
    [
      LineStream::InputLine.new("#{tbhead}{id=\"#{tag}\"#{options}}", l.no),
      LineStream::InputLine.new(
        "#{tbhead}<<[#{code_list_format(listno)}#{caption}](#{file})",
        l.no
      ),
    ]
  when /\A(.?> )?@<list>\{([^}]*)\}\[([^\]]*)\](\{([^}]*)\})?\s*\Z/
    tbhead = $1 || ''
    tag = $2
    listno = $listtag[tag] || 'XX'
    caption = $3
    options = $5
    options = ', ' + options if options and options != ''
    [
      LineStream::InputLine.new(
        "#{tbhead}{id=\"#{tag}\", title=\"#{code_list_format(listno)}#{caption}\"#{options}}",
        l.no
      ),
      LineStream::InputLine.new("#{tbhead}~~~~~~~~", l.no),
    ]
  when /\A(.?> )?@<list>\s*\Z/
    tbhead = $1 || ''
    LineStream::InputLine.new("#{tbhead}~~~~~~~~", l.no)
  else
    l
  end
end

def reference_figures(l)
  l.line.gsub!(/@<fig>\(([^)]*)\)/) do
    figno = ''
    tag = $1
    if $figtag.key?(tag)
      figno = "[#{$figtag[tag]}](##{tag})"
    else
      $stderr.puts "#{$state.file_name}:#{l.no}: warning: undefined figure tag #{tag}"
      figno = 'XX'
    end
    figno
  end
  l
end

def reference_tables(l)
  l.line.gsub!(/@<tbl>\(([^)]*)\)/) do
    tblno = ''
    tag = $1
    if $tbltag.key?(tag)
      tblno = "[#{$tbltag[tag]}](##{tag})"
    else
      $stderr.puts "#{$state.file_name}:#{l.no}: warning: undefined table tag #{tag}"
      tblno = 'XX'
    end
    tblno
  end
  l
end

def reference_code_lists(l)
  l.line.gsub!(/@<list>\(([^)]*)\)/) do
    listno = ''
    tag = $1
    if $listtag.key?(tag)
      listno = "[#{$listtag[tag]}](##{tag})"
    else
      $stderr.puts "#{$state.file_name}:#{l.no}: warning: undefined list tag #{tag}"
      listno = 'XX'
    end
    listno
  end
  l
end

def reference_sections(l)
  l.line.gsub!(/@<sref>\(([^)]*)\)/) do
    secno = ''
    label = $1
    if $seclabel.key?(label)
      matter, secs, depth = $seclabel[label]
      secno = secs.split.map {|n| n.to_i}
      sec_id = section_id(matter, secno, depth)
      secstr = secno.take_while {|n| n > 0}.join('.')
      refstr = "[#{secstr}](##{sec_id})"
    else
      $stderr.puts "#{$state.file_name}:#{l.no}: warning: undefined section label #{label}"
      refstr = 'XX'
    end
    refstr
  end
  l
end

def expand_cmd(l)
  case l.line
  when /\A(.?> )?@<cmd>\{([^}]+)?\}\s*\Z/
    tbhead = $1 || ''
    opts = $2.nil? ? "lang=\"text\", linenos=off" : $2
    [
      LineStream::InputLine.new("#{tbhead}{#{opts}}", l.no),
      LineStream::InputLine.new("#{tbhead}~~~~~~~~", l.no),
    ]
  when /\A(.?> )?@<cmd>\s*\Z/
    tbhead = $1 || ''
    LineStream::InputLine.new("#{tbhead}~~~~~~~~", l.no)
  else
    l
  end
end

def switch_verb(l)
  if $state.verb
    if $state.verb == l.line
      $state.verb = false
    end
  else
    case l.line
    when /\A(.?> )?~+\Z/
      $state.verb = l.line
    when /\A(.?> )?@<list>\{[^}]+\}\[[^\]]+\]\s*\Z/
      tbhead = $1 || ''
      $state.verb = "#{tbhead}@<list>"
    when /\A(.?> )?@<cmd>\{[^}]+\}\s*\Z/
      tbhead = $1 || ''
      $state.verb = "#{tbhead}@<cmd>"
    end
  end
  l
end

def process_file(in_lines, pass)
  out_lines = LineStream.new

  case pass
  when 0  # number sections and figures
    while not in_lines.empty?
      l = in_lines.peekl
      unless l.line.start_with?('%%')
        in_lines.unshift(number_code_lists(in_lines.getl))
        in_lines.unshift(switch_verb(in_lines.getl))
        unless $state.verb
          in_lines.unshift(switch_matter(in_lines.getl))
          in_lines.unshift(number_sections(in_lines.getl))
          in_lines.unshift(number_figures(in_lines.getl))
          in_lines.unshift(number_tables(in_lines.getl))
          in_lines.unshift(label_sections(in_lines.getl))
        end
      end
      if (l = in_lines.getl)
        out_lines.putl(l)
      end
    end
  when 1
    while not in_lines.empty?
      l = in_lines.peekl
      unless l.line.start_with?('%%')
        in_lines.unshift(tag_code_lists(in_lines.getl))
        in_lines.unshift(expand_cmd(in_lines.getl))
        in_lines.unshift(switch_verb(in_lines.getl))
        unless $state.verb
          in_lines.unshift(tag_figures(in_lines.getl))
          in_lines.unshift(tag_tables(in_lines.getl))
          in_lines.unshift(reference_figures(in_lines.getl))
          in_lines.unshift(reference_tables(in_lines.getl))
          in_lines.unshift(reference_code_lists(in_lines.getl))
          in_lines.unshift(reference_sections(in_lines.getl))
          in_lines.unshift(process_commands(in_lines.getl))
        end
      end
      if (l = in_lines.getl)
        out_lines.putl(l)
      end
    end
  else
    $stderr.puts "Unexpected pass #{npass}"
    out_lines = in_lines
  end

  out_lines
end

def main
  $state = LpmpState.new

  txtfiles = []
  open('Book.txt') do |f|
    f.each_line do |l|
      txtfiles << l.chomp
    end
  end

  lmpfiles = []
  files_lines = []
  txtfiles.each do |txtf|
    if File.extname(txtf) != '.txt'
      $stderr.puts "Book.txt entry \"#{txtf}\" is not .txt; skipping"
      next
    end
    lmpf = txtf.sub(/\.txt$/, '.lmp')
    lmpfiles << lmpf
    $state.file_name = lmpf
    lines = nil
    open(lmpf) do |f|
      lines = LineStream.new(f.readlines.map {|l| l.chomp})
    end
    files_lines << lines
  end

  NPass.times do |npass|
    $state.verb = false
    files_lines.size.times do |i|
      $state.file_name = lmpfiles[i]
      files_lines[i] = process_file(files_lines[i], npass)
    end
  end

  [txtfiles, files_lines].transpose.each do |txtf, lines|
    open(txtf, 'w') do |f|
      lines.each do |l|
        f.puts l.line
      end
    end
  end
end

main
0
